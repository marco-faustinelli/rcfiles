set nocompatible
" allow backspacing over everything in insert mode
set backspace=indent,eol,start
" keep 500 lines of command line history
set history=5000
" show the cursor position all the time
set ruler
" display incomplete commands
set showcmd
" always show status line
set laststatus=2
" do incremental searching
set incsearch
" no sound bell, flash screen
set visualbell
" search case insensitive
set ignorecase
" search case insensitive unless first char is upper case
set smartcase 
" indent automatically 
set autoindent
" highlight search
set hlsearch
" show line numbers
set number
" no word wrap
set nowrap 
" wildmode
set wildmode=list:longest,full
" faster esc in visual/insert mode
set ttimeout
set ttimeoutlen=10
" longer mapping waiting time
set timeout
set timeoutlen=3000
" noesckeys <= NO, cursor don't work in insert mode
" text settings
set expandtab
set tabstop=4
set shiftwidth=4
set textwidth=80
" highlight current line
set cursorline
" map leader
let mapleader=','
" enable syntax
syntax on


" backup
" Save your backups to a less annoying place than the current directory.
" If you have .vim-backup in the current directory, it'll use that.
" Otherwise it saves it to ~/.vim/tmp/backup or . if all else fails.
if isdirectory($HOME . '/.vim/tmp/backup') == 0
  :silent !mkdir -p ~/.vim/tmp/backup >/dev/null 2>&1
endif
set backupdir=./.vim-backup/,~/.vim/tmp/backup/,.
set backup

" swap
" Save your swp files to a less annoying place than the current directory.
" If you have .vim-swap in the current directory, it'll use that.
" Otherwise it saves it to ~/.vim/tmp/swap, ~/tmp or .
if isdirectory($HOME . '/.vim/tmp/swap') == 0
  :silent !mkdir -p ~/.vim/tmp/swap >/dev/null 2>&1
endif
set directory=./.vim-swap//,~/.vim/tmp/swap//,~/tmp//,.
set swapfile

" persistent undo
if exists('+undofile')
  " undofile - This allows you to use undos after exiting and restarting
  " This, like swap and backups, uses .vim-undo first, then ~/.vim/tmp/undo
  " :help undo-persistence
  " This is only present in 7.3+
  if isdirectory($HOME . '/.vim/tmp/undo') == 0
    :silent !mkdir -p ~/.vim/tmp/undo > /dev/null 2>&1
  endif
  set undodir=./.vim-undo//,~/.vim/tmp/undo//
  set undofile
endif

" autocommands
if has('autocmd')
    autocmd Filetype html setlocal ts=4 sts=4 sw=4
    autocmd Filetype ruby setlocal ts=2 sts=2 sw=2
    autocmd Filetype javascript setlocal ts=2 sts=2 sw=2
    autocmd Filetype jade setlocal ts=2 sts=2 sw=2
    autocmd Filetype scheme setlocal ts=2 sts=2 sw=2
endif

" mappings
"
" <C-L> removes highlight
noremap <silent> <C-L> :nohlsearch<cr><C-L>
" simple ad blank line (next)
noremap <leader>o o<esc>k
" simple add blank line (prev)
noremap <leader>O O<esc>j
" vimrc
noremap <Leader>vco :split $MYVIMRC<Cr>
noremap <Leader>vcc :w <Bar> source % <Bar> q<Cr>
noremap <Leader>vce :e $MYVIMRC<Cr>
noremap <Leader>vcs :w <Bar> source $MYVIMRC<Cr>

"
" My gui config
"
if has('gui_running')
  if has('gui_macvim')
      set guifont=Consolas:h16
  else
      set guifont=Consolas\ 12
  endif
  set guioptions-=m
  set guioptions-=T
  set guioptions-=r
endif

" fix terminal problems?
if !has('gui_running')
  set t_RV=
  set t_Co=256 " Explicitly tell vim that the terminal supports 256 colors
endif

" vundle
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#begin()

Bundle 'gmarik/vundle'
Bundle 'matchit.zip'
Bundle 'surround.vim'
Bundle 'The-NERD-Commenter'
Bundle 'tpope/vim-fugitive'
Bundle 'kien/ctrlp.vim'
"Bundle 'SirVer/ultisnips'
Bundle 'scrooloose/syntastic'
Bundle 'Tabular'
Bundle 'mileszs/ack.vim'
Bundle 'godlygeek/csapprox'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'Lokaltog/vim-powerline'
Bundle 'thinca/vim-visualstar'
Bundle 'MarcWeber/vim-addon-local-vimrc'

" text objects
Bundle 'kana/vim-textobj-user'
Bundle 'michaeljsmith/vim-indent-object'
Bundle 'nelstrom/vim-textobj-rubyblock'
Bundle 'vim-scripts/argtextobj.vim'

" javascript
Bundle 'pangloss/vim-javascript'
Bundle 'kchmck/vim-coffee-script'
" ruby
Bundle 'vim-ruby/vim-ruby'
Bundle 'ecomba/vim-ruby-refactoring'
" php
Bundle 'php.vim'
Bundle 'PDV--phpDocumentor-for-Vim'
Bundle 'phpcomplete.vim'
" haml
Bundle 'tpope/vim-haml'
" jade
Bundle 'digitaltoad/vim-jade'
" stylus
Bundle 'wavded/vim-stylus'
" markdown
"Bundle 'suan/vim-instant-markdown'
Bundle 'tpope/vim-markdown'

call vundle#end()

filetype plugin indent on

" color schemes
" colorscheme digerati
colorscheme molokai
hi CursorLine cterm=NONE,underline

" plugins
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$\|.work$\|.keep$'
let g:ctrlp_cmd = 'CtrlPMixed'

" MARCO MAPPINGS
map gn :bn<cr>
map gp :bp<cr>
map gd :bd<cr>

" autoload the local .vimrc file you need to have
" https://github.com/MarcWeber/vim-addon-local-vimrc
" plugin installed

let g:syntastic_php_checkers = ['php']
let g:syntastic_mode_map = {'mode': 'active'}

aug settings
  au BufRead,BufNewFile build.xml setlocal expandtab tabstop=4 shiftwidth=4
  au BufRead,BufNewFile *.feature setlocal expandtab tabstop=4 shiftwidth=4
aug end

unlet g:ctrlp_custom_ignore
let g:ctrlp_custom_ignore = '\.git$\|\.tmp$\|\.work$\|vendor$'

nnoremap <silent> <Leader>t :setlocal nocursorline <BAR> call RunCurrentTest('') <BAR> setlocal cursorline<CR>
nnoremap <silent> <Leader>T :setlocal nocursorline <BAR> call RunCurrentTest('--stop-on-failure') <BAR> setlocal cursorline<CR>
nnoremap <silent> <Leader>l :setlocal nocursorline <BAR> call RunLastTest() <BAR> setlocal cursorline<CR>
nnoremap <silent> <Leader>f :setlocal nocursorline <BAR> call RunCurrentFunction() <BAR> setlocal cursorline<CR>
nnoremap <silent> <Leader>e :setlocal nocursorline <BAR> call RunCurrentLine() <BAR> setlocal cursorline<CR>
nnoremap <silent> <Leader>o :call OpenCurrentTest()<CR>

" with the following map in normal mode <Leader>a will replace array(...) with [...]
nnoremap <silent> <Leader>a /\<array\>\s*(<CR>:nohl<CR>dwmp%r]`pr[

" with the following map in normal mode <Leader>s will remove the use of $self
" in place of $this in all the closures
nnoremap <silent> <Leader>s :g/\$self = \$this/d<CR>:%s/use ($self) //eg<CR>:%s/use ($self, /use (/eg<CR>:%s/\$self/$this/eg<CR>


" note that the following only works with tpope/vim-commentary plugin
" cannot say something like if exists("g:loaded_commentary") because
" this file is sourced before commentary plugin, need to find a solution
" for this...
nnoremap <silent> <Leader>c :g/\<var_dump\>/ :normal gcc<CR>

function! RunCurrentLine()
  exec '!php -r "var_dump(' . substitute(getline('.'), '^\s\+\|;$', '', 'g') . ');"'
endfunction

function! RunLastTest()
  if exists("g:php_pushups_last_command")
    exec g:php_pushups_last_command
  else
    echo 'sorry, nothing to run :-('
  end
endfunction

function! RunCurrentFunction()
  let l:current_file=expand('%:p')
  if match(l:current_file, 'Test\.php$') != -1
    let l:function_pattern='\C^\s*\%(public\s\+\|static\s\+\|abstract\s\+\|protected\s\+\|private\s\+\)*function\s\+\([^(]\+\)\s*(.*$'
    let l:function_line=search(l:function_pattern, 'bcnW')
    if l:function_line > 0
      let l:matches=matchlist(getline(l:function_line), l:function_pattern)
      let g:php_pushups_last_command='!vendor/bin/phpunit --filter="' . l:matches[1] . '$" ' . l:current_file
      exec g:php_pushups_last_command
    else
      echo 'sorry, nothing to run :-('
    endif
  elseif match(l:current_file, '\.feature$') != 1
    let l:scenario_pattern='\C^\s*Scenario\s*:\s*.*$'
    let l:scenario_line=search(l:scenario_pattern, 'bcnW')
    if l:scenario_line > 0
      let g:php_pushups_last_command='!cleanup.sh; vendor/bin/behat ' . l:current_file . ':' . l:scenario_line
      exec g:php_pushups_last_command
    else
      echo 'sorry, nothing to run :-('
    endif
  endif
endfunction

function! RunCurrentTest(parameters)
  let l:current_file=expand('%:p')
  let l:test_file='nothing'
  if match(l:current_file, '\.php$') != -1
    if match(l:current_file, 'Test\.php$') != -1
      let l:test_file=l:current_file
    else
      let l:test_file=SearchForRelatedTestFile(l:current_file)
    endif
    if l:test_file != 'nothing'
      let g:php_pushups_last_command='!vendor/bin/phpunit ' . a:parameters. ' ' . l:test_file
      exec g:php_pushups_last_command
    else
      echo 'sorry, nothing to run :-('
    endif
  elseif match(l:current_file, '\.feature$') != 1
    let g:php_pushups_last_command='!cleanup.sh; ./scripts/behat-parallel.sh -q ' . l:current_file
    exec g:php_pushups_last_command
  endif
endfunction

function! OpenCurrentTest()
  let l:current_file=expand("%:p")
  let l:test_file="nothing"
  let l:test_file=SearchForRelatedTestFile(l:current_file)
  if l:test_file != "nothing"
    exec ":belowright :split " l:test_file
  else
    echo "sorry, nothing to open :-("
  endif
endfunction


function! SearchForRelatedTestFile(file_path)
  let l:file_name=fnamemodify(a:file_path, ":t")
  let l:test_file_name=fnamemodify(l:file_name, ":r") . "Test.php"
  let l:project_root_path=ProjectRootGuess(a:file_path)
  let l:found=system("find '".l:project_root_path."/spec' -name '".l:test_file_name."'")
  let l:number_of_file_founds=strlen(substitute(l:found, "[^\n]", "", "g"))
  if l:number_of_file_founds == 1
    return l:found
  endif
endfunction


function! ProjectRootGuess(file_path)
  for l:marker in [".git", ".vimrc"]
    let l:result=""
    let l:pivot=a:file_path
    while l:pivot!=fnamemodify(l:pivot, ":h")
      let l:pivot=fnamemodify(l:pivot, ":h")
      if len(glob(l:pivot."/".l:marker))
        let l:result=l:pivot
      endif
    endwhile
    if len(l:result)
      return l:result
    endif
  endfor
  return filereadable(a:file_path) ? fnamemodify(a:file_path, ":h") : a:file_path
endfunction

map <F6>  :call ComposerKnowWhereCurrentFileIs()<CR>
function! ComposerKnowWhereCurrentFileIs()
    let l:currentWord = expand('<cword>')
    let l:command = "grep " . l:currentWord . " ../onebip/vendor/composer -R | awk '{print $6}' | awk -F\\' '{print $2}'"
    let l:commandFileFound = l:command . ' | wc -l'
    let l:numberOfResults = system(l:commandFileFound)
    if l:numberOfResults == 1
        let l:fileName = system(l:command)
        let l:openFileCommand = 'tabe /root/projects/Onebip/onebip' . l:fileName
        exec l:openFileCommand
    else
        exec "normal \<c-p>" . expand('<cword>')
    endif
endfunction
